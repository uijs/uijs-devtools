#!/usr/bin/env node
var path = require('path');
var fs = require('fs');
var watch = require('fs-watch-tree').watchTree;
var build = require('../lib/build');
var debug = require('../lib/debugger');

var usage = [
  'Development tools for uijs apps and modules',
  'Usage: $0 <command> <app> [options]',
  '',
  '<command> is one of:',
  '  build - Builds a uijs module or app',
  '  debug - Starts a debugging server for a uijs module/app (also builds)',
  '',
  '<app> is is one of:',
  '  (not specified) - Looks for package.json in current directory',
  '  path/to/app/directory - A path to a directory that contains a package.json file',
  '  path/to/package.json - Explicit path to an app/module package.json',
  '  path/to/module.js - Explicit path to a single module (for apps that only depend on uijs)',
];

var optimist = require('optimist')
  .usage(usage.join('\n'))
  .describe('w', 'watch for changes (defaults to cwd). multiple -w options may be used').alias('w', 'watch')
  .describe('verbose', 'verbose output').alias('v', 'verbose')
  .alias('h', 'help');

var argv = optimist.argv;

if (argv.h || argv._.length < 1 || argv._.length > 2) {
  process.stdout.write(optimist.help());
  return;
}

var command = argv._[0];
var app = argv._[1] || process.cwd();

var watchlist = argv.watch;
if (!watchlist) watchlist = [];
if (watchlist === true) watchlist = [ app ];
else if (!Array.isArray(watchlist)) watchlist = [ watchlist ];

var building = false;
watchlist.forEach(function(watchitem) {
  var item = path.resolve(watchitem);

  return fs.stat(item, function(err, stat) {
    if (err) {
      console.error('unable to watch ' + item);
      return;
    }

    var dir = stat.isDirectory() ? item : path.dirname(item);

    var exclude = [ 'dist', 'node_modules', '.git', /\.tmp.+/ ];
    
    console.log('Watching', dir, 'exclude:', exclude);
    watch(dir, { exclude: exclude }, function(event) {
      if (!event.isModify() || building) return;

      console.log(event.name + ' changed. rebuilding');
      building = true;
      return build(app, function(err) {
        building = false;
        if (err) {
          console.error('build failed');
          console.error(err);
          return;
        }
      });
    });

  });

});

if (command === 'build') {
  return build(app, function(err) {
    if (err) console.error(err);
  });
} else if (command === 'debug') {
  return build(app, function(err, p) {
    return debug(p.outputs, function(err) {
      if (err) console.error(err);
    });
  });
} else {
  console.error('Unknown command', command);
  process.stdout.write(optimist.help());
}